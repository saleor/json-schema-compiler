// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`JSON schema compiler > compileSchemaToJs > compileSchemaToJs compiles schema to JS code 1`] = `
"/* c8 ignore start */
\\"use strict\\";
export const validate = validate10;
export default validate10;
const schema11 = {
  $schema: \\"http://json-schema.org/draft-07/schema\\",
  type: \\"object\\",
  properties: {
    pspReference: { type: \\"string\\" },
    data: { type: \\"object\\", additionalProperties: true, properties: {} },
    result: {
      anyOf: [
        { type: \\"string\\", const: \\"CHARGE_SUCCESS\\" },
        { type: \\"string\\", const: \\"CHARGE_FAILURE\\" },
        { type: \\"string\\", const: \\"CHARGE_REQUESTED\\" },
        { type: \\"string\\", const: \\"AUTHORIZATION_SUCCESS\\" },
        { type: \\"string\\", const: \\"AUTHORIZATION_FAILURE\\" },
        { type: \\"string\\", const: \\"AUTHORIZATION_REQUESTED\\" },
      ],
    },
    amount: { type: \\"number\\", minimum: 0 },
    time: { type: \\"string\\", format: \\"date-time\\" },
    externalUrl: { type: \\"string\\" },
    message: { type: \\"string\\" },
  },
  required: [
    \\"pspReference\\",
    \\"data\\",
    \\"result\\",
    \\"amount\\",
    \\"time\\",
    \\"externalUrl\\",
    \\"message\\",
  ],
};
const formats0 = require(\\"ajv-formats/dist/formats\\").fullFormats[\\"date-time\\"];
function validate10(
  data,
  { instancePath = \\"\\", parentData, parentDataProperty, rootData = data } = {}
) {
  let vErrors = null;
  let errors = 0;
  if (errors === 0) {
    if (data && typeof data == \\"object\\" && !Array.isArray(data)) {
      let missing0;
      if (
        (data.pspReference === undefined && (missing0 = \\"pspReference\\")) ||
        (data.data === undefined && (missing0 = \\"data\\")) ||
        (data.result === undefined && (missing0 = \\"result\\")) ||
        (data.amount === undefined && (missing0 = \\"amount\\")) ||
        (data.time === undefined && (missing0 = \\"time\\")) ||
        (data.externalUrl === undefined && (missing0 = \\"externalUrl\\")) ||
        (data.message === undefined && (missing0 = \\"message\\"))
      ) {
        validate10.errors = [
          {
            instancePath,
            schemaPath: \\"#/required\\",
            keyword: \\"required\\",
            params: { missingProperty: missing0 },
            message: \\"must have required property '\\" + missing0 + \\"'\\",
          },
        ];
        return false;
      } else {
        if (data.pspReference !== undefined) {
          const _errs1 = errors;
          if (typeof data.pspReference !== \\"string\\") {
            validate10.errors = [
              {
                instancePath: instancePath + \\"/pspReference\\",
                schemaPath: \\"#/properties/pspReference/type\\",
                keyword: \\"type\\",
                params: { type: \\"string\\" },
                message: \\"must be string\\",
              },
            ];
            return false;
          }
          var valid0 = _errs1 === errors;
        } else {
          var valid0 = true;
        }
        if (valid0) {
          if (data.data !== undefined) {
            let data1 = data.data;
            const _errs3 = errors;
            if (errors === _errs3) {
              if (data1 && typeof data1 == \\"object\\" && !Array.isArray(data1)) {
              } else {
                validate10.errors = [
                  {
                    instancePath: instancePath + \\"/data\\",
                    schemaPath: \\"#/properties/data/type\\",
                    keyword: \\"type\\",
                    params: { type: \\"object\\" },
                    message: \\"must be object\\",
                  },
                ];
                return false;
              }
            }
            var valid0 = _errs3 === errors;
          } else {
            var valid0 = true;
          }
          if (valid0) {
            if (data.result !== undefined) {
              let data2 = data.result;
              const _errs6 = errors;
              const _errs7 = errors;
              let valid1 = false;
              const _errs8 = errors;
              if (typeof data2 !== \\"string\\") {
                const err0 = {
                  instancePath: instancePath + \\"/result\\",
                  schemaPath: \\"#/properties/result/anyOf/0/type\\",
                  keyword: \\"type\\",
                  params: { type: \\"string\\" },
                  message: \\"must be string\\",
                };
                if (vErrors === null) {
                  vErrors = [err0];
                } else {
                  vErrors.push(err0);
                }
                errors++;
              }
              if (\\"CHARGE_SUCCESS\\" !== data2) {
                const err1 = {
                  instancePath: instancePath + \\"/result\\",
                  schemaPath: \\"#/properties/result/anyOf/0/const\\",
                  keyword: \\"const\\",
                  params: { allowedValue: \\"CHARGE_SUCCESS\\" },
                  message: \\"must be equal to constant\\",
                };
                if (vErrors === null) {
                  vErrors = [err1];
                } else {
                  vErrors.push(err1);
                }
                errors++;
              }
              var _valid0 = _errs8 === errors;
              valid1 = valid1 || _valid0;
              if (!valid1) {
                const _errs10 = errors;
                if (typeof data2 !== \\"string\\") {
                  const err2 = {
                    instancePath: instancePath + \\"/result\\",
                    schemaPath: \\"#/properties/result/anyOf/1/type\\",
                    keyword: \\"type\\",
                    params: { type: \\"string\\" },
                    message: \\"must be string\\",
                  };
                  if (vErrors === null) {
                    vErrors = [err2];
                  } else {
                    vErrors.push(err2);
                  }
                  errors++;
                }
                if (\\"CHARGE_FAILURE\\" !== data2) {
                  const err3 = {
                    instancePath: instancePath + \\"/result\\",
                    schemaPath: \\"#/properties/result/anyOf/1/const\\",
                    keyword: \\"const\\",
                    params: { allowedValue: \\"CHARGE_FAILURE\\" },
                    message: \\"must be equal to constant\\",
                  };
                  if (vErrors === null) {
                    vErrors = [err3];
                  } else {
                    vErrors.push(err3);
                  }
                  errors++;
                }
                var _valid0 = _errs10 === errors;
                valid1 = valid1 || _valid0;
                if (!valid1) {
                  const _errs12 = errors;
                  if (typeof data2 !== \\"string\\") {
                    const err4 = {
                      instancePath: instancePath + \\"/result\\",
                      schemaPath: \\"#/properties/result/anyOf/2/type\\",
                      keyword: \\"type\\",
                      params: { type: \\"string\\" },
                      message: \\"must be string\\",
                    };
                    if (vErrors === null) {
                      vErrors = [err4];
                    } else {
                      vErrors.push(err4);
                    }
                    errors++;
                  }
                  if (\\"CHARGE_REQUESTED\\" !== data2) {
                    const err5 = {
                      instancePath: instancePath + \\"/result\\",
                      schemaPath: \\"#/properties/result/anyOf/2/const\\",
                      keyword: \\"const\\",
                      params: { allowedValue: \\"CHARGE_REQUESTED\\" },
                      message: \\"must be equal to constant\\",
                    };
                    if (vErrors === null) {
                      vErrors = [err5];
                    } else {
                      vErrors.push(err5);
                    }
                    errors++;
                  }
                  var _valid0 = _errs12 === errors;
                  valid1 = valid1 || _valid0;
                  if (!valid1) {
                    const _errs14 = errors;
                    if (typeof data2 !== \\"string\\") {
                      const err6 = {
                        instancePath: instancePath + \\"/result\\",
                        schemaPath: \\"#/properties/result/anyOf/3/type\\",
                        keyword: \\"type\\",
                        params: { type: \\"string\\" },
                        message: \\"must be string\\",
                      };
                      if (vErrors === null) {
                        vErrors = [err6];
                      } else {
                        vErrors.push(err6);
                      }
                      errors++;
                    }
                    if (\\"AUTHORIZATION_SUCCESS\\" !== data2) {
                      const err7 = {
                        instancePath: instancePath + \\"/result\\",
                        schemaPath: \\"#/properties/result/anyOf/3/const\\",
                        keyword: \\"const\\",
                        params: { allowedValue: \\"AUTHORIZATION_SUCCESS\\" },
                        message: \\"must be equal to constant\\",
                      };
                      if (vErrors === null) {
                        vErrors = [err7];
                      } else {
                        vErrors.push(err7);
                      }
                      errors++;
                    }
                    var _valid0 = _errs14 === errors;
                    valid1 = valid1 || _valid0;
                    if (!valid1) {
                      const _errs16 = errors;
                      if (typeof data2 !== \\"string\\") {
                        const err8 = {
                          instancePath: instancePath + \\"/result\\",
                          schemaPath: \\"#/properties/result/anyOf/4/type\\",
                          keyword: \\"type\\",
                          params: { type: \\"string\\" },
                          message: \\"must be string\\",
                        };
                        if (vErrors === null) {
                          vErrors = [err8];
                        } else {
                          vErrors.push(err8);
                        }
                        errors++;
                      }
                      if (\\"AUTHORIZATION_FAILURE\\" !== data2) {
                        const err9 = {
                          instancePath: instancePath + \\"/result\\",
                          schemaPath: \\"#/properties/result/anyOf/4/const\\",
                          keyword: \\"const\\",
                          params: { allowedValue: \\"AUTHORIZATION_FAILURE\\" },
                          message: \\"must be equal to constant\\",
                        };
                        if (vErrors === null) {
                          vErrors = [err9];
                        } else {
                          vErrors.push(err9);
                        }
                        errors++;
                      }
                      var _valid0 = _errs16 === errors;
                      valid1 = valid1 || _valid0;
                      if (!valid1) {
                        const _errs18 = errors;
                        if (typeof data2 !== \\"string\\") {
                          const err10 = {
                            instancePath: instancePath + \\"/result\\",
                            schemaPath: \\"#/properties/result/anyOf/5/type\\",
                            keyword: \\"type\\",
                            params: { type: \\"string\\" },
                            message: \\"must be string\\",
                          };
                          if (vErrors === null) {
                            vErrors = [err10];
                          } else {
                            vErrors.push(err10);
                          }
                          errors++;
                        }
                        if (\\"AUTHORIZATION_REQUESTED\\" !== data2) {
                          const err11 = {
                            instancePath: instancePath + \\"/result\\",
                            schemaPath: \\"#/properties/result/anyOf/5/const\\",
                            keyword: \\"const\\",
                            params: { allowedValue: \\"AUTHORIZATION_REQUESTED\\" },
                            message: \\"must be equal to constant\\",
                          };
                          if (vErrors === null) {
                            vErrors = [err11];
                          } else {
                            vErrors.push(err11);
                          }
                          errors++;
                        }
                        var _valid0 = _errs18 === errors;
                        valid1 = valid1 || _valid0;
                      }
                    }
                  }
                }
              }
              if (!valid1) {
                const err12 = {
                  instancePath: instancePath + \\"/result\\",
                  schemaPath: \\"#/properties/result/anyOf\\",
                  keyword: \\"anyOf\\",
                  params: {},
                  message: \\"must match a schema in anyOf\\",
                };
                if (vErrors === null) {
                  vErrors = [err12];
                } else {
                  vErrors.push(err12);
                }
                errors++;
                validate10.errors = vErrors;
                return false;
              } else {
                errors = _errs7;
                if (vErrors !== null) {
                  if (_errs7) {
                    vErrors.length = _errs7;
                  } else {
                    vErrors = null;
                  }
                }
              }
              var valid0 = _errs6 === errors;
            } else {
              var valid0 = true;
            }
            if (valid0) {
              if (data.amount !== undefined) {
                let data3 = data.amount;
                const _errs20 = errors;
                if (errors === _errs20) {
                  if (typeof data3 == \\"number\\" && isFinite(data3)) {
                    if (data3 < 0 || isNaN(data3)) {
                      validate10.errors = [
                        {
                          instancePath: instancePath + \\"/amount\\",
                          schemaPath: \\"#/properties/amount/minimum\\",
                          keyword: \\"minimum\\",
                          params: { comparison: \\">=\\", limit: 0 },
                          message: \\"must be >= 0\\",
                        },
                      ];
                      return false;
                    }
                  } else {
                    validate10.errors = [
                      {
                        instancePath: instancePath + \\"/amount\\",
                        schemaPath: \\"#/properties/amount/type\\",
                        keyword: \\"type\\",
                        params: { type: \\"number\\" },
                        message: \\"must be number\\",
                      },
                    ];
                    return false;
                  }
                }
                var valid0 = _errs20 === errors;
              } else {
                var valid0 = true;
              }
              if (valid0) {
                if (data.time !== undefined) {
                  let data4 = data.time;
                  const _errs22 = errors;
                  if (errors === _errs22) {
                    if (errors === _errs22) {
                      if (typeof data4 === \\"string\\") {
                        if (!formats0.validate(data4)) {
                          validate10.errors = [
                            {
                              instancePath: instancePath + \\"/time\\",
                              schemaPath: \\"#/properties/time/format\\",
                              keyword: \\"format\\",
                              params: { format: \\"date-time\\" },
                              message:
                                'must match format \\"' + \\"date-time\\" + '\\"',
                            },
                          ];
                          return false;
                        }
                      } else {
                        validate10.errors = [
                          {
                            instancePath: instancePath + \\"/time\\",
                            schemaPath: \\"#/properties/time/type\\",
                            keyword: \\"type\\",
                            params: { type: \\"string\\" },
                            message: \\"must be string\\",
                          },
                        ];
                        return false;
                      }
                    }
                  }
                  var valid0 = _errs22 === errors;
                } else {
                  var valid0 = true;
                }
                if (valid0) {
                  if (data.externalUrl !== undefined) {
                    const _errs24 = errors;
                    if (typeof data.externalUrl !== \\"string\\") {
                      validate10.errors = [
                        {
                          instancePath: instancePath + \\"/externalUrl\\",
                          schemaPath: \\"#/properties/externalUrl/type\\",
                          keyword: \\"type\\",
                          params: { type: \\"string\\" },
                          message: \\"must be string\\",
                        },
                      ];
                      return false;
                    }
                    var valid0 = _errs24 === errors;
                  } else {
                    var valid0 = true;
                  }
                  if (valid0) {
                    if (data.message !== undefined) {
                      const _errs26 = errors;
                      if (typeof data.message !== \\"string\\") {
                        validate10.errors = [
                          {
                            instancePath: instancePath + \\"/message\\",
                            schemaPath: \\"#/properties/message/type\\",
                            keyword: \\"type\\",
                            params: { type: \\"string\\" },
                            message: \\"must be string\\",
                          },
                        ];
                        return false;
                      }
                      var valid0 = _errs26 === errors;
                    } else {
                      var valid0 = true;
                    }
                  }
                }
              }
            }
          }
        }
      }
    } else {
      validate10.errors = [
        {
          instancePath,
          schemaPath: \\"#/type\\",
          keyword: \\"type\\",
          params: { type: \\"object\\" },
          message: \\"must be object\\",
        },
      ];
      return false;
    }
  }
  validate10.errors = vErrors;
  return errors === 0;
}
"
`;
